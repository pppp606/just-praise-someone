// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(uuid())
  login           String?  @unique
  name            String                             // 名前 (GitHub プロフィール名を使用)
  email           String   @unique                   // GitHub のメールアドレス
  emailVerified   DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  userProfileId   String?  @unique                    // UserProfile の ID

  profile         UserProfile?  @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  accounts        Account[]
  sessions        Session[]
  givenPraises    Praise[]    @relation("UserGivenPraises") // 自分が送った褒め
  receivedPraises Praise[]  @relation("UserReceivedPraises") // 自分が受け取った褒め
  llmBatchJobs    LlmBatchJob[]

  @@map("users")
}

model UserProfile {
  id                 String   @id @default(uuid())
  providerAccountId  String
  providerUserId     String
  image              String?
  bio                String?                        // GitHub プロフィールの説明文
  snsLinks           Json?                          // 外部SNSリンクをJSON形式で保存
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user               User?     @relation            // User モデルとの 1:1 リレーション

  @@map("user_profiles")
}

model Account {
  id                 String   @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id                 String   @id @default(uuid())
  sessionToken       String   @unique
  userId             String
  expires            DateTime
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id        String   @id @default(uuid())
  identifier String
  token     String   @unique
  expires   DateTime

  @@map("verification_tokens")
}

model Praise {
  id         String      @id @default(uuid())
  givenUserId String                           // 褒めたユーザーのID
  receivedUserId   String                      // 褒められたユーザーのID
  content    String      @db.VarChar(255)      // 最大255文字
  isApproved Boolean     @default(false)       // 公開許可フラグ
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  fromUser   User        @relation("UserGivenPraises", fields: [givenUserId], references: [id])
  toUser     User        @relation("UserReceivedPraises", fields: [receivedUserId], references: [id])
  skills     PraiseSkill[]

  @@unique([givenUserId, receivedUserId])
  @@map("praises")
}

model Skill {
  id        String      @id @default(uuid())
  code      String      @unique
  name      String
  sortOrder Int         @default(0)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  praises   PraiseSkill[]
  @@map("skills")
}

model PraiseSkill {
  id         String      @id @default(uuid())
  praiseId   String
  skillId    String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  praise     Praise      @relation(fields: [praiseId], references: [id], onDelete: Cascade)
  skill      Skill       @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([praiseId, skillId])
  @@map("praise_skills")
}

enum Provider {
  openai @map("OPENAI")
  anthropic @map("ANTHROPIC")
  google @map("GOOGLE")
}

enum JobStatus {
  pending @map("PENDING")
  processing @map("PROCESSING")
  completed @map("COMPLETED")
  failed @map("FAILED")
}

enum JobType {
  praise @map("PRAISE")
}

model LlmBatchJob {
  id          String    @id @default(uuid())
  userId      String    @db.VarChar(255)
  provider    Provider  // LLM APIプロバイダー
  jobId       String    @unique
  jobType     JobType   // バッチジョブの種類
  metadata    Json?
  status      JobStatus @default(pending)
  response    Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("llm_batch_jobs")
  @@unique([provider, jobId])
}
