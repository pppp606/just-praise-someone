// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())  // UUID
  name          String                         // 名前 (GitHub プロフィール名を使用)
  email     　　 String   @unique               // GitHub のメールアドレス
  emailVerified DateTime?
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  profile   UserProfile?  @relation
  accounts      Account[]
  sessions      Session[]
  givenPraises     Praise[]    @relation("UserGivenPraises") // 自分が送った褒め
  receivedPraises  Praise[]    @relation("UserReceivedPraises") // 自分が受け取った褒め
}

model UserProfile {
  id         String   @id @default(uuid())  // UUID
  userId     String   @unique               // User モデルとの 1:1 リレーション
  bio        String?                        // GitHub プロフィールの説明文
  sns_links  Json?                          // 外部SNSリンクをJSON形式で保存
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User @relation(fields: [userId], references: [id])
}

model Account {
  id                 String   @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id                 String   @id @default(uuid())
  sessionToken       String   @unique
  userId             String
  expires            DateTime
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id        String   @id @default(uuid())
  identifier String
  token     String   @unique
  expires   DateTime
}

model Praise {
  id         String      @id @default(uuid())
  givenUserId String                           // 褒めたユーザーのID
  receivedUserId   String                      // 褒められたユーザーのID
  content    String
  isApproved Boolean     @default(false)       // 公開許可フラグ
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  fromUser   User        @relation("UserGivenPraises", fields: [givenUserId], references: [id])
  toUser     User        @relation("UserReceivedPraises", fields: [receivedUserId], references: [id])
  skills     PraiseSkill[]
}

model Skill {
  id        String      @id @default(uuid())
  code      String      @unique               // ユニークな識別コード
  name      String
  sortOrder Int         @default(0)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  praises   PraiseSkill[]
}

model PraiseSkill {
  id         String      @id @default(uuid())
  praiseId   String
  skillId    String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  praise     Praise      @relation(fields: [praiseId], references: [id])
  skill      Skill       @relation(fields: [skillId], references: [id])
}
